// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"PB/pkg/models/shared"
	"PB/pkg/utils"
	"errors"
	"net/http"
)

type GetAllLivingThingsRequest struct {
	// include all filters
	Filter []interface{} `queryParam:"style=form,explode=true,name=filter"`
}

func (o *GetAllLivingThingsRequest) GetFilter() []interface{} {
	if o == nil {
		return nil
	}
	return o.Filter
}

type GetAllLivingThings200ApplicationJSON2Meta2Pagination struct {
	PageNumber *int64 `json:"pageNumber,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON2Meta2Pagination) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

type GetAllLivingThings200ApplicationJSON2Meta2 struct {
	Pagination *GetAllLivingThings200ApplicationJSON2Meta2Pagination `json:"pagination,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON2Meta2) GetPagination() *GetAllLivingThings200ApplicationJSON2Meta2Pagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

type GetAllLivingThings200ApplicationJSON2Meta1 struct {
	Pagination *shared.Pagination `json:"pagination,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON2Meta1) GetPagination() *shared.Pagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

type GetAllLivingThings200ApplicationJSON2MetaType string

const (
	GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta1 GetAllLivingThings200ApplicationJSON2MetaType = "get-all-living-things_200ApplicationJSON_2_meta_1"
	GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta2 GetAllLivingThings200ApplicationJSON2MetaType = "get-all-living-things_200ApplicationJSON_2_meta_2"
)

type GetAllLivingThings200ApplicationJSON2Meta struct {
	GetAllLivingThings200ApplicationJSON2Meta1 *GetAllLivingThings200ApplicationJSON2Meta1
	GetAllLivingThings200ApplicationJSON2Meta2 *GetAllLivingThings200ApplicationJSON2Meta2

	Type GetAllLivingThings200ApplicationJSON2MetaType
}

func CreateGetAllLivingThings200ApplicationJSON2MetaGetAllLivingThings200ApplicationJSON2Meta1(getAllLivingThings200ApplicationJSON2Meta1 GetAllLivingThings200ApplicationJSON2Meta1) GetAllLivingThings200ApplicationJSON2Meta {
	typ := GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta1

	return GetAllLivingThings200ApplicationJSON2Meta{
		GetAllLivingThings200ApplicationJSON2Meta1: &getAllLivingThings200ApplicationJSON2Meta1,
		Type: typ,
	}
}

func CreateGetAllLivingThings200ApplicationJSON2MetaGetAllLivingThings200ApplicationJSON2Meta2(getAllLivingThings200ApplicationJSON2Meta2 GetAllLivingThings200ApplicationJSON2Meta2) GetAllLivingThings200ApplicationJSON2Meta {
	typ := GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta2

	return GetAllLivingThings200ApplicationJSON2Meta{
		GetAllLivingThings200ApplicationJSON2Meta2: &getAllLivingThings200ApplicationJSON2Meta2,
		Type: typ,
	}
}

func (u *GetAllLivingThings200ApplicationJSON2Meta) UnmarshalJSON(data []byte) error {

	getAllLivingThings200ApplicationJSON2Meta1 := GetAllLivingThings200ApplicationJSON2Meta1{}
	if err := utils.UnmarshalJSON(data, &getAllLivingThings200ApplicationJSON2Meta1, "", true, true); err == nil {
		u.GetAllLivingThings200ApplicationJSON2Meta1 = &getAllLivingThings200ApplicationJSON2Meta1
		u.Type = GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta1
		return nil
	}

	getAllLivingThings200ApplicationJSON2Meta2 := GetAllLivingThings200ApplicationJSON2Meta2{}
	if err := utils.UnmarshalJSON(data, &getAllLivingThings200ApplicationJSON2Meta2, "", true, true); err == nil {
		u.GetAllLivingThings200ApplicationJSON2Meta2 = &getAllLivingThings200ApplicationJSON2Meta2
		u.Type = GetAllLivingThings200ApplicationJSON2MetaTypeGetAllLivingThings200ApplicationJSON2Meta2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAllLivingThings200ApplicationJSON2Meta) MarshalJSON() ([]byte, error) {
	if u.GetAllLivingThings200ApplicationJSON2Meta1 != nil {
		return utils.MarshalJSON(u.GetAllLivingThings200ApplicationJSON2Meta1, "", true)
	}

	if u.GetAllLivingThings200ApplicationJSON2Meta2 != nil {
		return utils.MarshalJSON(u.GetAllLivingThings200ApplicationJSON2Meta2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAllLivingThings200ApplicationJSON2 struct {
	Animals []shared.Animals                           `json:"animals,omitempty"`
	Meta    *GetAllLivingThings200ApplicationJSON2Meta `json:"meta,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON2) GetAnimals() []shared.Animals {
	if o == nil {
		return nil
	}
	return o.Animals
}

func (o *GetAllLivingThings200ApplicationJSON2) GetMeta() *GetAllLivingThings200ApplicationJSON2Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetAllLivingThings200ApplicationJSON1MetaPagination struct {
	PageNumber *int64 `json:"pageNumber,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON1MetaPagination) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

type GetAllLivingThings200ApplicationJSON1Meta struct {
	Pagination *GetAllLivingThings200ApplicationJSON1MetaPagination `json:"pagination,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON1Meta) GetPagination() *GetAllLivingThings200ApplicationJSON1MetaPagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

type GetAllLivingThings200ApplicationJSON1 struct {
	Birds []shared.Birds                             `json:"birds,omitempty"`
	Meta  *GetAllLivingThings200ApplicationJSON1Meta `json:"meta,omitempty"`
}

func (o *GetAllLivingThings200ApplicationJSON1) GetBirds() []shared.Birds {
	if o == nil {
		return nil
	}
	return o.Birds
}

func (o *GetAllLivingThings200ApplicationJSON1) GetMeta() *GetAllLivingThings200ApplicationJSON1Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetAllLivingThings200ApplicationJSONType string

const (
	GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON1 GetAllLivingThings200ApplicationJSONType = "get-all-living-things_200ApplicationJSON_1"
	GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON2 GetAllLivingThings200ApplicationJSONType = "get-all-living-things_200ApplicationJSON_2"
)

type GetAllLivingThings200ApplicationJSON struct {
	GetAllLivingThings200ApplicationJSON1 *GetAllLivingThings200ApplicationJSON1
	GetAllLivingThings200ApplicationJSON2 *GetAllLivingThings200ApplicationJSON2

	Type GetAllLivingThings200ApplicationJSONType
}

func CreateGetAllLivingThings200ApplicationJSONGetAllLivingThings200ApplicationJSON1(getAllLivingThings200ApplicationJSON1 GetAllLivingThings200ApplicationJSON1) GetAllLivingThings200ApplicationJSON {
	typ := GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON1

	return GetAllLivingThings200ApplicationJSON{
		GetAllLivingThings200ApplicationJSON1: &getAllLivingThings200ApplicationJSON1,
		Type:                                  typ,
	}
}

func CreateGetAllLivingThings200ApplicationJSONGetAllLivingThings200ApplicationJSON2(getAllLivingThings200ApplicationJSON2 GetAllLivingThings200ApplicationJSON2) GetAllLivingThings200ApplicationJSON {
	typ := GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON2

	return GetAllLivingThings200ApplicationJSON{
		GetAllLivingThings200ApplicationJSON2: &getAllLivingThings200ApplicationJSON2,
		Type:                                  typ,
	}
}

func (u *GetAllLivingThings200ApplicationJSON) UnmarshalJSON(data []byte) error {

	getAllLivingThings200ApplicationJSON1 := GetAllLivingThings200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &getAllLivingThings200ApplicationJSON1, "", true, true); err == nil {
		u.GetAllLivingThings200ApplicationJSON1 = &getAllLivingThings200ApplicationJSON1
		u.Type = GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON1
		return nil
	}

	getAllLivingThings200ApplicationJSON2 := GetAllLivingThings200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &getAllLivingThings200ApplicationJSON2, "", true, true); err == nil {
		u.GetAllLivingThings200ApplicationJSON2 = &getAllLivingThings200ApplicationJSON2
		u.Type = GetAllLivingThings200ApplicationJSONTypeGetAllLivingThings200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAllLivingThings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetAllLivingThings200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.GetAllLivingThings200ApplicationJSON1, "", true)
	}

	if u.GetAllLivingThings200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.GetAllLivingThings200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAllLivingThingsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	GetAllLivingThings200ApplicationJSONOneOf *GetAllLivingThings200ApplicationJSON
}

func (o *GetAllLivingThingsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAllLivingThingsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAllLivingThingsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAllLivingThingsResponse) GetGetAllLivingThings200ApplicationJSONOneOf() *GetAllLivingThings200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetAllLivingThings200ApplicationJSONOneOf
}
