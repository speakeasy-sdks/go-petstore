// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"PB/v2/pkg/utils"
	"errors"
)

type ComplexObject2 struct {
}

type ComplexObjectBirdsType string

const (
	ComplexObjectBirdsTypeArrayOfany     ComplexObjectBirdsType = "arrayOfany"
	ComplexObjectBirdsTypeComplexObject2 ComplexObjectBirdsType = "ComplexObject_2"
)

type ComplexObjectBirds struct {
	ArrayOfany     []interface{}
	ComplexObject2 *ComplexObject2

	Type ComplexObjectBirdsType
}

func CreateComplexObjectBirdsArrayOfany(arrayOfany []interface{}) ComplexObjectBirds {
	typ := ComplexObjectBirdsTypeArrayOfany

	return ComplexObjectBirds{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func CreateComplexObjectBirdsComplexObject2(complexObject2 ComplexObject2) ComplexObjectBirds {
	typ := ComplexObjectBirdsTypeComplexObject2

	return ComplexObjectBirds{
		ComplexObject2: &complexObject2,
		Type:           typ,
	}
}

func (u *ComplexObjectBirds) UnmarshalJSON(data []byte) error {

	complexObject2 := ComplexObject2{}
	if err := utils.UnmarshalJSON(data, &complexObject2, "", true, true); err == nil {
		u.ComplexObject2 = &complexObject2
		u.Type = ComplexObjectBirdsTypeComplexObject2
		return nil
	}

	arrayOfany := []interface{}{}
	if err := utils.UnmarshalJSON(data, &arrayOfany, "", true, true); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = ComplexObjectBirdsTypeArrayOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ComplexObjectBirds) MarshalJSON() ([]byte, error) {
	if u.ArrayOfany != nil {
		return utils.MarshalJSON(u.ArrayOfany, "", true)
	}

	if u.ComplexObject2 != nil {
		return utils.MarshalJSON(u.ComplexObject2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreatedDateType string

const (
	CreatedDateTypeInteger CreatedDateType = "integer"
	CreatedDateTypeStr     CreatedDateType = "str"
)

type CreatedDate struct {
	Integer *int64
	Str     *string

	Type CreatedDateType
}

func CreateCreatedDateInteger(integer int64) CreatedDate {
	typ := CreatedDateTypeInteger

	return CreatedDate{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreatedDateStr(str string) CreatedDate {
	typ := CreatedDateTypeStr

	return CreatedDate{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreatedDate) UnmarshalJSON(data []byte) error {

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CreatedDateTypeInteger
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatedDateTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreatedDate) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdatedDateType string

const (
	UpdatedDateTypeInteger UpdatedDateType = "integer"
	UpdatedDateTypeNumber  UpdatedDateType = "number"
)

type UpdatedDate struct {
	Integer *int64
	Number  *float64

	Type UpdatedDateType
}

func CreateUpdatedDateInteger(integer int64) UpdatedDate {
	typ := UpdatedDateTypeInteger

	return UpdatedDate{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdatedDateNumber(number float64) UpdatedDate {
	typ := UpdatedDateTypeNumber

	return UpdatedDate{
		Number: &number,
		Type:   typ,
	}
}

func (u *UpdatedDate) UnmarshalJSON(data []byte) error {

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = UpdatedDateTypeInteger
		return nil
	}

	number := float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdatedDateTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdatedDate) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Data struct {
	Animal      []Animals           `json:"animal,omitempty"`
	Birds       *ComplexObjectBirds `json:"birds,omitempty"`
	CreatedDate *CreatedDate        `json:"createdDate,omitempty"`
	UpdatedDate *UpdatedDate        `json:"updatedDate,omitempty"`
}

func (o *Data) GetAnimal() []Animals {
	if o == nil {
		return nil
	}
	return o.Animal
}

func (o *Data) GetBirds() *ComplexObjectBirds {
	if o == nil {
		return nil
	}
	return o.Birds
}

func (o *Data) GetCreatedDate() *CreatedDate {
	if o == nil {
		return nil
	}
	return o.CreatedDate
}

func (o *Data) GetUpdatedDate() *UpdatedDate {
	if o == nil {
		return nil
	}
	return o.UpdatedDate
}

type Two struct {
	PageNumber *string `json:"pageNumber,omitempty"`
}

func (o *Two) GetPageNumber() *string {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

type MetaType string

const (
	MetaTypePagination MetaType = "Pagination"
	MetaTypeTwo        MetaType = "2"
)

type Meta struct {
	Pagination *Pagination
	Two        *Two

	Type MetaType
}

func CreateMetaPagination(pagination Pagination) Meta {
	typ := MetaTypePagination

	return Meta{
		Pagination: &pagination,
		Type:       typ,
	}
}

func CreateMetaTwo(two Two) Meta {
	typ := MetaTypeTwo

	return Meta{
		Two:  &two,
		Type: typ,
	}
}

func (u *Meta) UnmarshalJSON(data []byte) error {

	two := Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = MetaTypeTwo
		return nil
	}

	pagination := Pagination{}
	if err := utils.UnmarshalJSON(data, &pagination, "", true, true); err == nil {
		u.Pagination = &pagination
		u.Type = MetaTypePagination
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Meta) MarshalJSON() ([]byte, error) {
	if u.Pagination != nil {
		return utils.MarshalJSON(u.Pagination, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ComplexObject struct {
	Data *Data   `json:"data,omitempty"`
	Meta *Meta   `json:"meta,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *ComplexObject) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *ComplexObject) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *ComplexObject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}
