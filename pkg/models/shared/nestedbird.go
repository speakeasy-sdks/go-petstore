// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Unit string

const (
	UnitMonths Unit = "months"
	UnitYears  Unit = "years"
	UnitDays   Unit = "days"
)

func (e Unit) ToPointer() *Unit {
	return &e
}

func (e *Unit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "months":
		fallthrough
	case "years":
		fallthrough
	case "days":
		*e = Unit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Unit: %v", v)
	}
}

type Age struct {
	Amount *float64 `json:"amount,omitempty"`
	Unit   Unit     `json:"unit"`
}

func (o *Age) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *Age) GetUnit() Unit {
	if o == nil {
		return Unit("")
	}
	return o.Unit
}

type Span struct {
	Amount *float64 `json:"amount,omitempty"`
	Unit   *string  `json:"unit,omitempty"`
}

func (o *Span) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *Span) GetUnit() *string {
	if o == nil {
		return nil
	}
	return o.Unit
}

type Wings struct {
	Count *int64 `json:"count,omitempty"`
	Span  *Span  `json:"span,omitempty"`
}

func (o *Wings) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *Wings) GetSpan() *Span {
	if o == nil {
		return nil
	}
	return o.Span
}

type Flight struct {
	CanFly *bool  `json:"canFly,omitempty"`
	Wings  *Wings `json:"wings,omitempty"`
}

func (o *Flight) GetCanFly() *bool {
	if o == nil {
		return nil
	}
	return o.CanFly
}

func (o *Flight) GetWings() *Wings {
	if o == nil {
		return nil
	}
	return o.Wings
}

type Geography struct {
	Latitude   *string `json:"latitude,omitempty"`
	Longitutde *string `json:"longitutde,omitempty"`
}

func (o *Geography) GetLatitude() *string {
	if o == nil {
		return nil
	}
	return o.Latitude
}

func (o *Geography) GetLongitutde() *string {
	if o == nil {
		return nil
	}
	return o.Longitutde
}

type Location struct {
	Geography *Geography `json:"geography,omitempty"`
}

func (o *Location) GetGeography() *Geography {
	if o == nil {
		return nil
	}
	return o.Geography
}

type NestedBird struct {
	Age      *Age       `json:"age,omitempty"`
	Flight   *Flight    `json:"flight,omitempty"`
	Food     []string   `json:"food,omitempty"`
	ID       *string    `json:"id,omitempty"`
	Location []Location `json:"location,omitempty"`
	Name     *string    `json:"name,omitempty"`
}

func (o *NestedBird) GetAge() *Age {
	if o == nil {
		return nil
	}
	return o.Age
}

func (o *NestedBird) GetFlight() *Flight {
	if o == nil {
		return nil
	}
	return o.Flight
}

func (o *NestedBird) GetFood() []string {
	if o == nil {
		return nil
	}
	return o.Food
}

func (o *NestedBird) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NestedBird) GetLocation() []Location {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *NestedBird) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}
