// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NestedBirdAgeUnit string

const (
	NestedBirdAgeUnitMonths NestedBirdAgeUnit = "months"
	NestedBirdAgeUnitYears  NestedBirdAgeUnit = "years"
	NestedBirdAgeUnitDays   NestedBirdAgeUnit = "days"
)

func (e NestedBirdAgeUnit) ToPointer() *NestedBirdAgeUnit {
	return &e
}

func (e *NestedBirdAgeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "months":
		fallthrough
	case "years":
		fallthrough
	case "days":
		*e = NestedBirdAgeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NestedBirdAgeUnit: %v", v)
	}
}

type NestedBirdAge struct {
	Amount *float64          `json:"amount,omitempty"`
	Unit   NestedBirdAgeUnit `json:"unit"`
}

func (o *NestedBirdAge) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *NestedBirdAge) GetUnit() NestedBirdAgeUnit {
	if o == nil {
		return NestedBirdAgeUnit("")
	}
	return o.Unit
}

type NestedBirdFlightWingsSpan struct {
	Amount *float64 `json:"amount,omitempty"`
	Unit   *string  `json:"unit,omitempty"`
}

func (o *NestedBirdFlightWingsSpan) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *NestedBirdFlightWingsSpan) GetUnit() *string {
	if o == nil {
		return nil
	}
	return o.Unit
}

type NestedBirdFlightWings struct {
	Count *int64                     `json:"count,omitempty"`
	Span  *NestedBirdFlightWingsSpan `json:"span,omitempty"`
}

func (o *NestedBirdFlightWings) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *NestedBirdFlightWings) GetSpan() *NestedBirdFlightWingsSpan {
	if o == nil {
		return nil
	}
	return o.Span
}

type NestedBirdFlight struct {
	CanFly *bool                  `json:"canFly,omitempty"`
	Wings  *NestedBirdFlightWings `json:"wings,omitempty"`
}

func (o *NestedBirdFlight) GetCanFly() *bool {
	if o == nil {
		return nil
	}
	return o.CanFly
}

func (o *NestedBirdFlight) GetWings() *NestedBirdFlightWings {
	if o == nil {
		return nil
	}
	return o.Wings
}

type NestedBirdLocationGeography struct {
	Latitude   *string `json:"latitude,omitempty"`
	Longitutde *string `json:"longitutde,omitempty"`
}

func (o *NestedBirdLocationGeography) GetLatitude() *string {
	if o == nil {
		return nil
	}
	return o.Latitude
}

func (o *NestedBirdLocationGeography) GetLongitutde() *string {
	if o == nil {
		return nil
	}
	return o.Longitutde
}

type NestedBirdLocation struct {
	Geography *NestedBirdLocationGeography `json:"geography,omitempty"`
}

func (o *NestedBirdLocation) GetGeography() *NestedBirdLocationGeography {
	if o == nil {
		return nil
	}
	return o.Geography
}

type NestedBird struct {
	Age      *NestedBirdAge       `json:"age,omitempty"`
	Flight   *NestedBirdFlight    `json:"flight,omitempty"`
	Food     []string             `json:"food,omitempty"`
	ID       *string              `json:"id,omitempty"`
	Location []NestedBirdLocation `json:"location,omitempty"`
	Name     *string              `json:"name,omitempty"`
}

func (o *NestedBird) GetAge() *NestedBirdAge {
	if o == nil {
		return nil
	}
	return o.Age
}

func (o *NestedBird) GetFlight() *NestedBirdFlight {
	if o == nil {
		return nil
	}
	return o.Flight
}

func (o *NestedBird) GetFood() []string {
	if o == nil {
		return nil
	}
	return o.Food
}

func (o *NestedBird) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NestedBird) GetLocation() []NestedBirdLocation {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *NestedBird) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}
